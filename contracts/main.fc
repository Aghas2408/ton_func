#include "imports/stdlib.fc";

const const::min_tons_for_storage = 10000000; ;; 0.01 TON

(int, slice, slice) load_data() inline {
    var ds = get_data().begin_parse();
    return (
        ds~load_uint(32), ;; counter_value
        ds~load_msg_addr(), ;; the most recent sender
        ds~load_msg_addr() ;; owner_address
    );
}

() save_data(int counter_value, slice recent_sender, slice owner_address) impure inline {
    set_data(begin_cell()
    .store_uint(counter_value, 32) ;; counter_value
    .store_slice(recent_sender) ;; the most recent sender
    .store_slice(owner_address) ;; owner_address
    .end_cell());
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4); ;; first 4 bits are flags, pointer moves to next 4 bits
    slice sender_address = cs~load_msg_addr(); ;; next 32 bytes are sender address, pointer moves to next 4 bytes

    int op = in_msg_body~load_uint(32);

    var (counter_value, recent_sender, owner_address) = load_data();

    if (op == 1) {
        int increment = in_msg_body~load_uint(32);

        save_data(counter_value + increment, sender_address, owner_address);
        return();
    }


    if (op == 2) {
        return();
        ;;deposit
    }

    if (op == 3) {
        ;;withdrawal
        ;; equal_slice_bits()
        ;; throw_unless() throw_if()
        ;; get_balance()
       
        throw_unless(103, equal_slice_bits(sender_address, owner_address));

        int withdraw_amount = in_msg_body~load_coins();
        var [balance, _] = get_balance();
        throw_unless(104, balance >= withdraw_amount);

        int return_value = min(withdraw_amount, balance - const::min_tons_for_storage);

    
        int msg_mode = 1;
        ;; TODO: Sending internal message with funds
        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_coins(return_value)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
    
        send_raw_message(msg.end_cell(), msg_mode);

    
        return();
    }

    ;; if(op == 4){
    ;; 	var burn_msg = begin_cell()
    ;; 		.store_uint(0x18, 6)
    ;; 		.store_slice(sender_address)
    ;; 		.store_coins(0)
    ;; 		.store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);

    ;; 	send_raw_message(burn_msg.end_cell(),128 + 32);
    ;; }

    throw(777);
    {-
    int n = in_msg_body~load_uint(32);

    slice ds = get_data().begin_parse();
    slice addr_c4 = ds~load_msg_addr(); 
    int total = ds~load_uint(32);
    total += n;

    set_data(begin_cell().store_slice(sender_address).store_uint(total,32).end_cell());
    -}
}


(int, slice, slice) get_contract_storage_data() method_id {
    var (counter_value, recent_sender, owner_address) = load_data();
    return (counter_value, recent_sender, owner_address);
}

{-
slice get_the_latest_sender() method_id {
    cell data = get_data();
    slice cs = data.begin_parse();
    slice sender_address = cs~load_msg_addr();
    return sender_address;
}

(slice,int) get_sum() method_id {
    slice ds = get_data().begin_parse();
    return (ds~load_msg_addr(),ds~load_uint(32));
}
-}

int balance() method_id {
    var [balance, _] = get_balance();
    return balance;
} 